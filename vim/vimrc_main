" DO NOT EDIT THIS FILE. IT IS MAINTAINED BY ANSIBLE.
"
" vulder's vimrc
"
" Maintainer: vulder
" WARNING:    Read before you source in all these commands and macros!  Some
"             of them may change VIM behavior that you depend on.
"

" nvim fix for leaking symbols
set guicursor=

" It's VIM, not VI
set nocompatible

" * General configurations
set backspace=indent,eol,start
set cursorline
set encoding=utf-8
set hidden
set incsearch
set laststatus=2
set list
set listchars=trail:.
set mouse=a
set nohlsearch
set number
set tags+=./.tags
set splitbelow
set noswapfile

" Ignore files with type *.x
set wildignore+=build,*.a,*.so,*.o,*.obj,.git

" A tab produces a 2-space indentation
set softtabstop=2
set shiftwidth=2
set expandtab
set tabstop=2
" Add and delete spaces in increments of `shiftwidth' for tabs
set smarttab

" Go specific tab handling
autocmd FileType go set listchars=tab:▸\ 

" Enable file type detection
filetype on
" Enable loading the plugin files
filetype plugin on

" Fixed file type detection
augroup filetype
  au! BufRead,BufNewFile *.tex     set filetype=tex
augroup END

" Map leader later used 4 shortcuts
let mapleader = " "

" Highlight syntax in programming languages
syntax on

" Enable syntax highlighting for ram files. To use, copy
augroup filetype
  au! BufRead,BufNewFile *.ram     set filetype=ram
augroup END

augroup filetype
  au! BufRead,BufNewFile */playbooks/*.yml set filetype=yaml.ansible
augroup END

" * General key bindings
set wildchar=<Tab> wildmenu wildmode=full
nnoremap <leader>y :call Yapf()<cr>

map <F1> <Esc>
imap <F1> <Esc>

map <leader>m :Make<CR>
map <leader>n :Copen<CR>
" Ag search needs silver-searcher
nmap <leader>a :Ag 

" Folding
inoremap <F9> <C-O>za
nnoremap <F9> za
vnoremap <F9> zf

nnoremap <leader>r :w<CR>:!tmux send-keys -t {last} C-p C-j <CR><CR>
nnoremap <leader>R :w<CR>:!tmux send-keys -t {last}. C-p C-j <CR><CR>

nmap <leader>/ :!trans :en ''<left>

" * General extra modifications

" Blinking when jumping to the next word
nnoremap <silent> n n:call HLNext(0.2)<cR>
nnoremap <silent> N N:call HLNext(0.2)<cR>

let cppstd = 'c++20'

function! HLNext (blinktime)
    highlight WhiteOnRed ctermfg=White ctermbg=Red
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#\%('.@/.'\)'
    let ring = matchadd('WhiteOnRed', target_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction

" Delete trailing whitespace and tabs at the end of each line
command! DeleteTrailingWs :%s/\s\+$//

" Convert all tab characters to two spaces
command! Untab :%s/\t/  /g

" Get highlight color
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
command! GetHigh call SynStack()

" Plugin loading
call plug#begin('~/.vim/plugged')

" Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clangd-completer --ts-completer --go-completer --rust-completer'}
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
Plug 'prabirshrestha/async.vim'
Plug 'w0rp/ale'
Plug 'tpope/vim-fugitive'
Plug 'bling/vim-airline'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-endwise'
Plug 'easymotion/vim-easymotion'
Plug 'davidhalter/jedi-vim', { 'for': 'python'}
Plug 'thinca/vim-quickrun'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tweekmonster/braceless.vim', { 'for': 'python'}
Plug 'airblade/vim-gitgutter'
Plug 'terryma/vim-multiple-cursors'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'eagletmt/neco-ghc'
Plug 'kien/rainbow_parentheses.vim'
"Plug 'LaTeX-Box-Team/LaTeX-Box'
Plug 'rhysd/committia.vim'
Plug 'cohama/lexima.vim'
Plug 'junegunn/goyo.vim'
Plug 'mgedmin/coverage-highlight.vim', { 'for': 'python' }
Plug 'micha/vim-colors-solarized'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'fatih/molokai',
Plug 'KabbAmine/zeavim.vim',
Plug 'ryanoasis/vim-devicons'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
" Plug 'jeaye/color_coded', { 'do': 'mkdir build; cd build && rm -f CMakeCache.txt && cmake .. && make install'},
Plug 'nickhutchinson/vim-cmake-syntax',
Plug 'lervag/vimtex',
Plug 'Ron89/thesaurus_query.vim',
Plug 'google/vim-maktaba',
Plug 'google/vim-codefmt',
Plug 'google/vim-glaive',
Plug 'google/vim-syncopate',
Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins' }

call plug#end()

call glaive#Install()

" * Plugin options

" -> YouCompleteMe
" Bindings for C/C++ DefImp jumps
" nnoremap <F11> :YcmForceCompileAndDiagnostics <CR>
" nnoremap <leader>d :YcmCompleter GoToDefinition <CR>
" nnoremap <leader>i :YcmCompleter GoToDeclaration <CR>
" nnoremap <F2> :YcmCompleter RefactorRename 
" nmap <leader>h <plug>(YCMHover)
" nnoremap <leader>re :YcmCompleter GoToReferences<CR> 
" let g:ycm_use_clangd = 0
" let g:ycm_clangd_binary_path = "/usr/lib/llvm/14/bin/clangd"
" " let g:ycm_clangd_args = ['-std=c++20']
" let g:ycm_always_populate_location_list = 1
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_collect_identifiers_from_tags_files = 1
" let g:ycm_confirm_extra_conf=0
" let g:ycm_min_num_of_chars_for_completion = 1
" let g:ycm_semantic_triggers = {
"       \   'haskell' : ['.'],
"       \ 'cpp' : ['->', '.', '::', 're![a-zA-Z]+'],
"       \ }
" let g:ycm_seed_identifiers_with_syntax=1
" let g:ycm_add_preview_to_completeopt=1
" let g:ycm_max_num_candidates=20
" let g:ycm_max_num_identifier_candidates=2

" autocmd FileType java let g:EclimCompletionMethod='omnifunc'
" autocmd FileType java set omnifunc=eclim#java#complete#CodeComplete
" autocmd FileType java nnoremap <leader>b :ProjectBuild<CR>
" autocmd FileType java nnoremap <leader>r :ProjectRun<CR>

" -> neoclide/coc.nvim
set cmdheight=2
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
nnoremap <leader>d <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
nnoremap <leader>i <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
nnoremap <leader>re <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <leader>h :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <F2> <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" -> async.vim
" -> ale
let g:ale_sign_error = ''
let g:ale_sign_warning = ''

let g:ale_linters = {
      \ 'h': ['clangtidy'],
      \ 'hpp': ['clangtidy'],
      \ 'cpp': ['clangtidy'],
      \ }

 let g:ale_pattern_options = {
       \ '\.h$': {
       \   'ale_cpp_clangtidy_extra_options': '-std=' . cppstd . ' -I/home/vulder/git/vara-llvm-project/llvm/include/ -I/home/vulder/git/vara-llvm-project/llvm/dbg/include/ -I/home/vulder/git/vara-llvm-project/clang/include/ -I/home/vulder/git/vara-llvm-project/vara/include/ -I/home/vulder/git/benchtest/code/build/googlebenchmark-src/include -I/home/vulder/git/vara-llvm-project/vara/lib/libTracing/ -I/home/vulder/git/ProgrammingFun/Cpp/extern/abseil-cpp/ -I/home/vulder/git/vara-llvm-project/phasar/include/ -I/home/vulder/git/vara-llvm-project/phasar/external/json/include/ -I/home/vulder/git/vara-feature/include/',
       \   },
       \ '\.cpp$': {
       \   'ale_cpp_clangtidy_extra_options': '-std=' . cppstd . ' -I/home/vulder/git/vara-llvm-project/llvm/include/ -I/home/vulder/git/vara-llvm-project/llvm/build/dev/include/ -I/home/vulder/git/vara-llvm-project/clang/include/ -I/home/vulder/git/vara-llvm-project/vara/include/ -I/home/vulder/git/benchtest/code/build/googlebenchmark-src/include -I/home/vulder/git/ProgrammingFun/Cpp/extern/abseil-cpp/ -I/home/vulder/git/vara-llvm-project/phasar/include/',
       \   }
       \}

" ale: c/cpp
{% if ansible_os_family == "Gentoo" %}
let g:ale_cpp_clangtidy_executable = '/usr/lib/llvm/{{ llvm_version }}/bin/clang-tidy'
{% else %}
let g:ale_cpp_clangtidy_executable = '/usr/bin/clang-tidy'
{% endif %}
let g:ale_cpp_clang_options = '-std=' . cppstd . ' -Wall -I''/home/{{ user }}/git/vara-llvm-project/llvm/include/'''
let g:ale_cpp_clangtidy_checks = []

let g:ale_c_build_dir_names = ['build/debug/', 'build/dev/', 'build/dbg/', 'build/']

" ale: python
let g:ale_python_flake8_executable = 'python3'
let g:ale_python_flake8_options = '-m flake8'
let g:ale_python_pylint_executable = 'python3'
let g:ale_python_pylint_options = '-m pylint'
nmap <silent> <leader>eu <Plug>(ale_previous_wrap)
nmap <silent> <leader>ed <Plug>(ale_next_wrap)

" ale: ansible
" pip install ansible-lint
"
" ale: cmake
" pip install cmakelang
"
" ale: text
" pip install proselint

" -> vim-fugitive
" -> vim-airline
" Airline display Buffers at top row
let g:airline#extensions#tabline#enabled = 1
" Enable Powerline fonts
let g:airline_powerline_fonts = 1

" -> vim-dispatch
" -> vim-surround
" -> tpope/vim-unimpaired
" -> vim-endwise
" -> vim-easymotion
map <leader> <Plug>(easymotion-prefix)
let g:EasyMotion_keys = "asdfghjklqwertyuiopzxcvbnm"

" -> jedi-vim
let g:jedi#auto_initialization = 1
let g:jedi#popup_select_first = 0
" let g:jedi#use_splits_not_buffers = "top"
" let g:jedi#rename_command = "<F2>"
let g:jedi#completions_enabled = 0
let g:jedi#show_call_signatures = "0"

" -> thinca/vim-quickrun
let g:quickrun_config = {
      \'*': {
      \'outputter/buffer/split': '15'},}
let g:quickrun_config['cpp'] = {'command': 'clang++', 'exec' : ['%c -std='. cppstd .' %s -lm -o %s.out', '%s.out']}
nnoremap <F10> :QuickRun<CR>
vnoremap <F10> :QuickRun<CR>

" -> fzf
" -> fzf.vim
nmap <c-p> :FZF<CR>
nmap <leader>l :Buffers<CR>

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" -> braceless.vim
" python indent support
autocmd FileType python :BracelessEnable +highlight +indent

" -> vim-gitgutter
nnoremap <leader>gp :GitGutterPreviewHunk<CR>
nnoremap <leader>gr :GitGutterRevertHunk<CR>
nnoremap <leader>gs :GitGutterStageHunk<CR>

" -> vim-multiple-cursors
" -> ultisnips
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsJumpForwardTrigger = "<cr>"
let g:ultisnips_python_style = "google"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

" -> vim-snippets

" -> neco-ghc
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
let g:necoghc_enable_detailed_browse = 1

" -> rainbow_parentheses.vim
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" Add highlighting for matching braces
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"" -> LaTeX-Box
"let g:LatexBox_latexmk_async=1
"let g:LatexBox_latexmk_options="-shell-escape"
"let g:LatexBox_show_warnings=0

" -> committia.vim
" -> lexima.vim
" -> goyo.vim
let g:goyo_width='40%-10%'
let g:goyo_height='80%'
let $GOPATH = "/home/{{ user }}/go/:/home/{{ user }}/git/GoDeeper/"

" -> coverage-highlight.vim
" -> vim-colors-solarized
" -> vim-go
" -> molokai
" -> zeavim.vim
" Doc settings
let g:zv_file_types = {
    \ 'cpp' : 'cpp',
    \ }

" -> vim-devicons
" -> rdnetto/YCM-Generator
" -> jeaye/color_coded
let g:color_coded_filetypes = ['c', 'cpp', 'cc']

" -> lervag/vimtex
let g:tex_flavor='latex'
" let g:vimtex_view_method='zathura'
let g:vimtex_view_general_viewer = 'evince'
let g:vimtex_view_method='general'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'

" -> Ron89/thesaurus_query.vim
let g:tq_enabled_backends=["datamuse_com","openoffice_en"]
" Download with:
" https://www.openoffice.org/lingucomponent/MyThes-1.zip
let g:tq_openoffice_en_file="~/git/doto/vim/thesaurus/MyThes-1.0/th_en_US_new"

" -> vim-maktaba
" -> vim-codefmt
nnoremap <silent> <leader>c :FormatCode<CR>
vnoremap <silent> <leader>c :FormatLines<CR>
augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  " autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
  autocmd FileType vue AutoFormatBuffer prettier
  autocmd FileType rs AutoFormatBuffer rustfmt
augroup END

" -> vim-glaive
" -> vim-syncopate
Glaive syncopate change_colorscheme=0 browser=google-chrome-unstable

" * Color settings
set t_Co=256

"colorscheme vividchalk
"colorscheme wombat256
"colorscheme badwolf
"colorscheme wellsokai

let updatetime=400
let g:jellybeans_ccextra=1
colorscheme jellybeans
"let g:rehash256 = 1
"colorscheme molokaied
"let g:solarized_termcolors=256
"set background=dark
"colorscheme solarizeded
"colorscheme solarized


let g:rehash256 = 1
" autocmd BufNew *.go colorscheme molokai
" autocmd BufNew *.py if g:colors_name != 'molokai' | colorscheme molokai | endif

autocmd FileType tex,text,markdown setlocal spell
autocmd FileType tex,text,markdown set spelllang=en_us
autocmd FileType tex,text,markdown inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

" Alternative words -> <C-X><C-T>
" set thesaurus+=/home/sattlerf/git/doto/vim/thesaurus/thesaurii.txt

" highlight ColorColumn ctermbg=DarkMagenta
call matchadd('ColorColumn', '\%81v', 100)

" * Optional C/C++ programming helpers
augroup csrc
  au!
  autocmd FileType *      set nocindent smartindent
  autocmd FileType c,cpp  set cindent
augroup END

" * LLVM specific options

" Set a few indentation parameters. See the VIM help for cinoptions-values for
" details.  These aren't absolute rules; they're just an approximation of
" common style in LLVM source.
set cinoptions=:0,g0,(0,Ws,l1

" LLVM Makefiles can have names such as Makefile.rules or TEST.nightly.Makefile,
" so it's important to categorize them as such.
augroup filetype
  au! BufRead,BufNewFile *Makefile* set filetype=make
augroup END

" In Makefiles, don't expand tabs to spaces, since we need the actual tabs
autocmd FileType make set noexpandtab

" Enable syntax highlighting for LLVM files. To use, copy
" utils/vim/llvm.vim to ~/.vim/syntax .
augroup filetype
  au! BufRead,BufNewFile *.ll     set filetype=llvm
augroup END

" Enable syntax highlighting for tablegen files. To use, copy
" utils/vim/tablegen.vim to ~/.vim/syntax .
augroup filetype
  au! BufRead,BufNewFile *.td     set filetype=tablegen
augroup END

" Enable syntax highlighting for reStructuredText files. To use, copy
" rest.vim (http://www.vim.org/scripts/script.php?script_id=973)
" to ~/.vim/syntax .
augroup filetype
 au! BufRead,BufNewFile *.rst     set filetype=rest
augroup END
